generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type {
  rent
  sale
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String                  @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  accounts              Account[]
  sessions              Session[]
  // Optional for WebAuthn support
  Authenticator         Authenticator[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  ViewedProperty        ViewedProperty[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model VerificationToken {
  identifier  String
  token       String
  expires     DateTime

  @@id([identifier, token])
}

model ForgotPasswordToken {
  identifier  String
  token       String
  expires     DateTime

  @@id([identifier, token])
}

model Property {
  id           String   @id @default(cuid())
  title        String
  description  String
  price        Float
  location     String
  type         Type     @default(sale)
  user_rating  Int
  house_area   Int

  ViewedProperty ViewedProperty[]
}

model ViewedProperty {
  id            Int       @id @default(autoincrement())
  userId        String
  propertyId    String
  viewedAt      DateTime  @default(now())

  // Relations to User and Property models
  user          User      @relation(fields: [userId], references: [id])
  property      Property  @relation(fields: [propertyId], references: [id])

  // Ensure that a user cannot view the same property multiple times
  @@unique([userId, propertyId])
}
